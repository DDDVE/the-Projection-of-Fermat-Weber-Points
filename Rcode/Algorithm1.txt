#此脚本用于记录旧方法平均运算时间（规模改变）
Oldt1_Dim20Point120 = proc.time()#程序开始时间
#无需先将FW point添加至M最后一行
var = 10#只改这里
setwd(paste("D:/paperData/TimeRecord/NewWay/Dim20Point120",sep=""))
files_Dim20Point120 = dir(paste("D:/paperData/TimeRecord/NewWay/Dim20Point120",sep=""))
circleNum = 100
accuracy = 10**(-7)
resultMatrixByNormalTraversal = matrix(nrow = circleNum,ncol = 3,byrow = TRUE) #初始化结果矩阵,Dim1 Dim2 次数

#计算仅保留两维后的数据矩阵，也就是投影集
subAlgo = function(M,Dim1,Dim2,circleN){
  triangle = matrix(nrow = 3,ncol = numOfDim,byrow = TRUE)  #初始化三角形
  #求最值和最值向量 
  MAnother = M
  vectorOfMin = c()
  vectorOfMax = c()
  for (j in 1:numOfDim){
    MAnother[,j] = sort(MAnother[,j])
    vectorOfMin = c(vectorOfMin,MAnother[1,j])
    vectorOfMax = c(vectorOfMax,MAnother[numOfPoint,j])
  }
  vectorOfMin1 = sort(vectorOfMin)
  minOfM = vectorOfMin1[1]
  vectorOfMax1 = sort(vectorOfMax)
  maxOfM = vectorOfMax1[numOfDim-1]
  
  MtoChange = M#将M保存一下，后续对MtoChange做改动
  for (j in 2:numOfDim) {#计算投影矩阵
    if(j!=Dim1 & j!=Dim2){
      MtoChange[,j] = minOfM
    }
  }
  #计算投影矩阵的FWpoint
  #生成目标函数的系数向量
  f.obj = c()
  for (i in 1:numOfPoint) {
    f.obj = c(f.obj,1)
  }
  for (i in 1:numOfDim) {
    f.obj = c(f.obj,0)
  }
  #做f.con的左上1/4个
  f.conLeftUpper = matrix(nrow = (numOfPoint*numOfDim*(numOfDim-1))/2,ncol = numOfPoint);f.conLeftUpper[is.na(f.conLeftUpper)] = 0
  for (i in 1:(numOfPoint*numOfDim*(numOfDim-1))/2) {
    j = (i-1)%/%(numOfDim*(numOfDim-1)/2)
    f.conLeftUpper[i,j+1] = -1    #将-1的元素放进去
  }
  f.conLeftHalf = rbind(f.conLeftUpper,f.conLeftUpper)    #做成f.con的左半边
  #做f.con的右上一小块
  f.conRightUpperPiece = matrix(nrow = (numOfDim*(numOfDim-1))/2,ncol = numOfDim)
  f.conRightUpperPiece[is.na(f.conRightUpperPiece)] = 0
  numOfDim1 = numOfDim2 = numOfDim    #准备好多余的变量
  numOfDim1 = numOfDim-1
  for (c in 1:numOfDim1){
    numOfDim2 = numOfDim-c
    for (i in 1:numOfDim2){
      a = i+(c-1)*numOfDim-(c*(c-1))/2
      b = i+c
      f.conRightUpperPiece[a,b] = -1
      f.conRightUpperPiece[a,c] = 1
    }
  }
  f.conRightUpper = c()
  for (i in 1:numOfPoint){
    f.conRightUpper = rbind(f.conRightUpper,f.conRightUpperPiece)
  }
  f.conRightHalf = rbind(f.conRightUpper,-1*f.conRightUpper)		#做成f.con的右半边
  f.con = cbind(f.conLeftHalf,f.conRightHalf)		#做成完整的f.con
  #生成不等号向量
  f.dir = c()
  a = numOfPoint*numOfDim*(numOfDim-1)
  for (i in 1:a) {
    f.dir = c(f.dir,"<=")
  }
  f.rhsFirstHalf = c()
  numOfDim1 = numOfDim-1
  for (i in 1:numOfPoint){#迭代到点数
    for (j1 in 1:numOfDim1){#迭代到维数-1
      a = j1+1
      for (j2 in a:numOfDim){#迭代到维数
        f.rhsFirstHalf = c(f.rhsFirstHalf,MtoChange[i,j1]-MtoChange[i,j2])
      }
    }
  }
  f.rhs = c(f.rhsFirstHalf, f.rhsFirstHalf*(-1))#做成完整的f.rhs
  solution = lp("min",f.obj,f.con,f.dir,f.rhs)$solution  #获取解向量
  #计算解向量到MtoChange每一行的tropical距离之和
  a = numOfPoint+1;b = numOfPoint+numOfDim
  trueSolution = solution[a:b]#获取solution有用的一部分
  for (i in numOfDim:1) {
    trueSolution[i] = trueSolution[i] - trueSolution[1] #将FW point标准化
  }
  optTropicalDistanceSum = 0
  for (i in 1:numOfPoint) {
    gap = sort(trueSolution-MtoChange[i,])
    optTropicalDistanceSum = optTropicalDistanceSum + (gap[numOfDim]-gap[1])
  }
  #计算MtoChange最后一行到其余各行的tropical距离之和
  a = numOfPoint-1
  tropicalDistanceSum = 0
  for (i in 1:a) {
    gap = sort(MtoChange[numOfPoint,]-MtoChange[i,])
    tropicalDistanceSum = tropicalDistanceSum + (gap[numOfDim]-gap[1])
  }
  print(paste('this is the',circleN,'-th traversal'))
  print(paste('we are traversing: ',circleN,"-",Dim1,Dim2))
  print(paste('optimal:',optTropicalDistanceSum,'reality:',tropicalDistanceSum))
  print(cat('the abs of opt minus reality is:',abs(optTropicalDistanceSum - tropicalDistanceSum),'\n'))
  if (abs(optTropicalDistanceSum - tropicalDistanceSum)<accuracy) { #如果是FW point的话就：
    #生成平行于某两维且其余维度位于下方的三角形
    #获取Dim1和Dim2的最大最小值
    minOfDim1 = vectorOfMin[Dim1]
    maxOfDim1 = vectorOfMax[Dim1]
    minOfDim2 = vectorOfMin[Dim2]
    maxOfDim2 = vectorOfMax[Dim2]
    for (i in 1:3) {
      for(j in 1:numOfDim){
        if(j==1){triangle[i,j] = 0}
        if(j!=Dim1 & j!=Dim2 & j!=1)
        {
          triangle[i,j] = minOfM-1
        }
        if(j == Dim1){
          if(i == 1){triangle[i,j] = minOfDim1}
          if(i == 2){triangle[i,j] = minOfDim1 + 1}
          if(i == 3){triangle[i,j] = maxOfDim1 + 1}
        }
        if(j == Dim2){
          if(i ==1){triangle[i,j] = minOfDim2}
          if(i == 2){triangle[i,j] = maxOfDim2 + 1}
          if(i == 3){triangle[i,j] = minOfDim2 + 1}
        }
      }
    }
    #print(triangle)
  }
  return(list(triangle = triangle))
}


#开始循环################################################################################
for (circleN in 1:circleNum) {
  #首先读取数据
  M = data.matrix(read.csv(files_Dim20Point120[circleN]))
  numOfDim = ncol(M); numOfPoint = nrow(M)
  E = 0#初始化次数##############
  #算M的FW point##############################################################
  f.obj = c()
  for (i in 1:numOfPoint) {
    f.obj = c(f.obj,1)
  }
  for (i in 1:numOfDim) {
    f.obj = c(f.obj,0)
  }
  #做f.con的左上1/4个
  f.conLeftUpper = matrix(nrow = (numOfPoint*numOfDim*(numOfDim-1))/2,ncol = numOfPoint);f.conLeftUpper[is.na(f.conLeftUpper)] = 0
  for (i in 1:(numOfPoint*numOfDim*(numOfDim-1))/2) {
    j = (i-1)%/%(numOfDim*(numOfDim-1)/2)
    f.conLeftUpper[i,j+1] = -1    #将-1的元素放进去
  }
  f.conLeftHalf = rbind(f.conLeftUpper,f.conLeftUpper)    #做成f.con的左半边
  #做f.con的右上一小块
  f.conRightUpperPiece = matrix(nrow = (numOfDim*(numOfDim-1))/2,ncol = numOfDim)
  f.conRightUpperPiece[is.na(f.conRightUpperPiece)] = 0
  numOfDim1 = numOfDim2 = numOfDim    #准备好多余的变量
  numOfDim1 = numOfDim-1
  for (c in 1:numOfDim1){
    numOfDim2 = numOfDim-c
    for (i in 1:numOfDim2){
      a = i+(c-1)*numOfDim-(c*(c-1))/2
      b = i+c
      f.conRightUpperPiece[a,b] = -1
      f.conRightUpperPiece[a,c] = 1
    }
  }
  f.conRightUpper = c()
  for (i in 1:numOfPoint){
    f.conRightUpper = rbind(f.conRightUpper,f.conRightUpperPiece)
  }
  f.conRightHalf = rbind(f.conRightUpper,-1*f.conRightUpper)		#做成f.con的右半边
  f.con = cbind(f.conLeftHalf,f.conRightHalf)		#做成完整的f.con
  #生成不等号向量
  f.dir = c()
  a = numOfPoint*numOfDim*(numOfDim-1)
  for (i in 1:a) {
    f.dir = c(f.dir,"<=")
  }
  f.rhsFirstHalf = c()
  numOfDim1 = numOfDim-1
  for (i in 1:numOfPoint){#迭代到点数
    for (j1 in 1:numOfDim1){#迭代到维数-1
      a = j1+1
      for (j2 in a:numOfDim){#迭代到维数
        f.rhsFirstHalf = c(f.rhsFirstHalf,M[i,j1]-M[i,j2])
      }
    }
  }
  f.rhs = c(f.rhsFirstHalf, f.rhsFirstHalf*(-1))#做成完整的f.rhs
  lp("min",f.obj,f.con,f.dir,f.rhs)
  lp("min",f.obj,f.con,f.dir,f.rhs)$solution
  solution = lp("min",f.obj,f.con,f.dir,f.rhs)$solution
  #获取FWPoint并添加到M的最后一行
  FWPoint = c()
  a = numOfPoint+1; b = numOfPoint+numOfDim
  for (i in a:b) {
    FWPoint = c(FWPoint,solution[i])
  }
  #标准化
  for (j in numOfDim:1){
    FWPoint[j] = FWPoint[j] - FWPoint[1]	
  }
  #将标准化后的FWPoint添加到M的最后一行
  M = rbind(M,FWPoint)
  numOfPoint = numOfPoint + 1
  #开始遍历情形######################################################
  b1 = numOfDim-1
  for (Dim1 in 2:b1) {
    a1 = Dim1 + 1
    for (Dim2 in a1:numOfDim) {
      E = E + 1 #次数+1
      resultOfSubAlgo = subAlgo(M,Dim1,Dim2,circleN)
      triangle = resultOfSubAlgo$triangle
      if (sum(is.na(triangle))==0) {
        resultMatrixByNormalTraversal[circleN,1] = Dim1; resultMatrixByNormalTraversal[circleN,2] = Dim2; resultMatrixByNormalTraversal[circleN,3] = E
        print(paste("(",Dim1,",",Dim2,") is good"))
        break
      }
      if (sum(is.na(triangle))!=0) {
        print(paste("(",Dim1,",",Dim2,") is not good"))
      }
    }
    if (sum(is.na(triangle))==0) {
      break
    }
  }
}
#循环完毕后保存结果矩阵
setwd(paste("D:/paperData/TimeRecord/OldWay",sep=""))
write.table(resultMatrixByNormalTraversal,file = paste("resultMatrixByNormalTraversalFor(0,",var,")Dim",numOfDim,
                                                     "Point",numOfPoint-1,".csv",sep=""),append = TRUE,row.names = FALSE,col.names = FALSE,sep=",")
Oldt2_Dim20Point120 = proc.time()#程序结束时间
print(paste("this program lasts",Oldt2_Dim20Point120-Oldt1_Dim20Point120,"second"))
