#此脚本用于记录新方法平均运算时间（规模改变）
t1_Dim15Point90 = proc.time()#程序开始时间
###############################
###############只改这里！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
setwd("D:/paperData/TimeRecord/NewWay/Dim15Point90")
files_Dim15Point90 = dir("D:/paperData/TimeRecord/NewWay/Dim15Point90")
var = 10
circleNum = 100
accuracy = 10**(-7) #精度
resultMatrix = matrix(nrow = circleNum,ncol = 3,byrow = TRUE)#初始化结果矩阵

#计算仅保留两维后的数据矩阵，也就是投影集
subAlgo = function(M,Dim1,Dim2,circleN,traNum){
  triangle = matrix(nrow = 3,ncol = numOfDim,byrow = TRUE)  #初始化三角形
  #求最值和最值向量 
  MAnother = M
  vectorOfMin = c()
  vectorOfMax = c()
  for (j in 1:numOfDim){
    MAnother[,j] = sort(MAnother[,j])
    vectorOfMin = c(vectorOfMin,MAnother[1,j])
    vectorOfMax = c(vectorOfMax,MAnother[numOfPoint,j])
  }
  vectorOfMin1 = sort(vectorOfMin)
  minOfM = vectorOfMin1[1]
  vectorOfMax1 = sort(vectorOfMax)
  maxOfM = vectorOfMax1[numOfDim-1]

  MtoChange = M#将M保存一下，后续对MtoChange做改动
  for (j in 2:numOfDim) {
    if(j!=Dim1 & j!=Dim2){
      MtoChange[,j] = minOfM
    }
  }
  #计算FWpoint
  #生成目标函数的系数向量
  f.obj = c()
  for (i in 1:numOfPoint) {
    f.obj = c(f.obj,1)
  }
  for (i in 1:numOfDim) {
    f.obj = c(f.obj,0)
  }
  #做f.con的左上1/4个
  f.conLeftUpper = matrix(nrow = (numOfPoint*numOfDim*(numOfDim-1))/2,ncol = numOfPoint);f.conLeftUpper[is.na(f.conLeftUpper)] = 0
  for (i in 1:(numOfPoint*numOfDim*(numOfDim-1))/2) {
    j = (i-1)%/%(numOfDim*(numOfDim-1)/2)
    f.conLeftUpper[i,j+1] = -1    #将-1的元素放进去
  }
  f.conLeftHalf = rbind(f.conLeftUpper,f.conLeftUpper)    #做成f.con的左半边
  #做f.con的右上一小块
  f.conRightUpperPiece = matrix(nrow = (numOfDim*(numOfDim-1))/2,ncol = numOfDim)
  f.conRightUpperPiece[is.na(f.conRightUpperPiece)] = 0
  numOfDim1 = numOfDim2 = numOfDim    #准备好多余的变量
  numOfDim1 = numOfDim-1
  for (c in 1:numOfDim1){
    numOfDim2 = numOfDim-c
    for (i in 1:numOfDim2){
      a = i+(c-1)*numOfDim-(c*(c-1))/2
      b = i+c
      f.conRightUpperPiece[a,b] = -1
      f.conRightUpperPiece[a,c] = 1
    }
  }
  f.conRightUpper = c()
  for (i in 1:numOfPoint){
    f.conRightUpper = rbind(f.conRightUpper,f.conRightUpperPiece)
  }
  f.conRightHalf = rbind(f.conRightUpper,-1*f.conRightUpper)		#做成f.con的右半边
  f.con = cbind(f.conLeftHalf,f.conRightHalf)		#做成完整的f.con
  #生成不等号向量
  f.dir = c()
  a = numOfPoint*numOfDim*(numOfDim-1)
  for (i in 1:a) {
    f.dir = c(f.dir,"<=")
  }
  f.rhsFirstHalf = c()
  numOfDim1 = numOfDim-1
  for (i in 1:numOfPoint){#迭代到点数
    for (j1 in 1:numOfDim1){#迭代到维数-1
      a = j1+1
      for (j2 in a:numOfDim){#迭代到维数
        f.rhsFirstHalf = c(f.rhsFirstHalf,MtoChange[i,j1]-MtoChange[i,j2])
      }
    }
  }
  f.rhs = c(f.rhsFirstHalf, f.rhsFirstHalf*(-1))#做成完整的f.rhs
  solution = lp("min",f.obj,f.con,f.dir,f.rhs)$solution  #获取解向量
  #计算解向量到MtoChange每一行的tropical距离之和
  a = numOfPoint+1;b = numOfPoint+numOfDim
  trueSolution = solution[a:b]#获取solution有用的一部分
  for (i in numOfDim:1) {
    trueSolution[i] = trueSolution[i] - trueSolution[1] #将FW point标准化
  }
  optTropicalDistanceSum = 0
  for (i in 1:numOfPoint) {
    gap = sort(trueSolution-MtoChange[i,])
    optTropicalDistanceSum = optTropicalDistanceSum + (gap[numOfDim]-gap[1])
  }
  #计算MtoChange最后一行到其余各行的tropical距离之和
  a = numOfPoint-1
  tropicalDistanceSum = 0
  for (i in 1:a) {
    gap = sort(MtoChange[numOfPoint,]-MtoChange[i,])
    tropicalDistanceSum = tropicalDistanceSum + (gap[numOfDim]-gap[1])
  }
  print(paste('this is the',traNum,'-th traversal'))
  print(paste('we are traversing: ',circleN,"-",Dim1,Dim2))
  print(paste('optimal:',optTropicalDistanceSum,'reality:',tropicalDistanceSum))
  print(paste('the difference on Dim1 is:',trueSolution[Dim1],MtoChange[numOfPoint,Dim1]))
  print(cat('the difference on Dim2 is:',trueSolution[Dim2],MtoChange[numOfPoint,Dim2],'\n'))
  print(cat('the abs of opt minus reality is:',abs(optTropicalDistanceSum - tropicalDistanceSum),'\n'))
  if (abs(optTropicalDistanceSum - tropicalDistanceSum)<accuracy) { #如果是FW point的话就：
    #生成平行于某两维且其余维度位于下方的三角形
    #获取Dim1和Dim2的最大最小值
    minOfDim1 = vectorOfMin[Dim1]
    maxOfDim1 = vectorOfMax[Dim1]
    minOfDim2 = vectorOfMin[Dim2]
    maxOfDim2 = vectorOfMax[Dim2]
    for (i in 1:3) {
      for(j in 1:numOfDim){
        if(j==1){triangle[i,j] = 0}
        if(j!=Dim1 & j!=Dim2 & j!=1)
        {
          triangle[i,j] = minOfM-1
        }
        if(j == Dim1){
          if(i == 1){triangle[i,j] = minOfDim1}
          if(i == 2){triangle[i,j] = minOfDim1 + 1}
          if(i == 3){triangle[i,j] = maxOfDim1 + 1}
        }
        if(j == Dim2){
          if(i ==1){triangle[i,j] = minOfDim2}
          if(i == 2){triangle[i,j] = maxOfDim2 + 1}
          if(i == 3){triangle[i,j] = minOfDim2 + 1}
        }
      }
    }
    #print(triangle)
  }
  return(list(triangle = triangle, trueSolution = trueSolution, MtoChange = MtoChange))
}



for (circleN in 1:circleNum) {
  #首先读取数据
  M = data.matrix(read.csv(files_Dim15Point90[circleN]))#这里要改
  numOfDim = ncol(M);  numOfPoint = nrow(M)
  #计算FW point
  #生成目标函数的系数向量
  f.obj = c()
  for (i in 1:numOfPoint) {
    f.obj = c(f.obj,1)
  }
  for (i in 1:numOfDim) {
    f.obj = c(f.obj,0)
  }
  #做f.con的左上1/4个
  f.conLeftUpper = matrix(nrow = (numOfPoint*numOfDim*(numOfDim-1))/2,ncol = numOfPoint);f.conLeftUpper[is.na(f.conLeftUpper)] = 0
  for (i in 1:(numOfPoint*numOfDim*(numOfDim-1))/2) {
    j = (i-1)%/%(numOfDim*(numOfDim-1)/2)
    f.conLeftUpper[i,j+1] = -1    #将-1的元素放进去
  }
  f.conLeftHalf = rbind(f.conLeftUpper,f.conLeftUpper)    #做成f.con的左半边
  #做f.con的右上一小块
  f.conRightUpperPiece = matrix(nrow = (numOfDim*(numOfDim-1))/2,ncol = numOfDim)
  f.conRightUpperPiece[is.na(f.conRightUpperPiece)] = 0
  numOfDim1 = numOfDim2 = numOfDim    #准备好多余的变量
  numOfDim1 = numOfDim-1
  for (c in 1:numOfDim1){
    numOfDim2 = numOfDim-c
    for (i in 1:numOfDim2){
      a = i+(c-1)*numOfDim-(c*(c-1))/2
      b = i+c
      f.conRightUpperPiece[a,b] = -1
      f.conRightUpperPiece[a,c] = 1
    }
  }
  f.conRightUpper = c()
  for (i in 1:numOfPoint){
    f.conRightUpper = rbind(f.conRightUpper,f.conRightUpperPiece)
  }
  f.conRightHalf = rbind(f.conRightUpper,-1*f.conRightUpper)		#做成f.con的右半边
  f.con = cbind(f.conLeftHalf,f.conRightHalf)		#做成完整的f.con
  #生成不等号向量
  f.dir = c()
  a = numOfPoint*numOfDim*(numOfDim-1)
  for (i in 1:a) {
    f.dir = c(f.dir,"<=")
  }
  f.rhsFirstHalf = c()
  numOfDim1 = numOfDim-1
  for (i in 1:numOfPoint){#迭代到点数
    for (j1 in 1:numOfDim1){#迭代到维数-1
      a = j1+1
      for (j2 in a:numOfDim){#迭代到维数
        f.rhsFirstHalf = c(f.rhsFirstHalf,M[i,j1]-M[i,j2])
      }
    }
  }
  f.rhs = c(f.rhsFirstHalf, f.rhsFirstHalf*(-1))#做成完整的f.rhs
  lp("min",f.obj,f.con,f.dir,f.rhs)
  lp("min",f.obj,f.con,f.dir,f.rhs)$solution
  solution = lp("min",f.obj,f.con,f.dir,f.rhs)$solution
  #获取FWPoint并添加到M的最后一行
  FWPoint = c()
  a = numOfPoint+1; b = numOfPoint+numOfDim
  for (i in a:b) {
    FWPoint = c(FWPoint,solution[i])
  }
  #标准化
  for (j in numOfDim:1){
    FWPoint[j] = FWPoint[j] - FWPoint[1]	
  }
  #将标准化后的FWPoint添加到M的最后一行
  M = rbind(M,FWPoint)
  numOfPoint = numOfPoint+1; 

  W = list() #待查看集合
  jNum = (numOfDim-1)*(numOfDim-2)/2  #终止循环的条件数
  L=matrix(ncol = 3,byrow=TRUE) #所有情形的集合
  a = numOfDim - 1
  for (i in 2:a) {
    b = i + 1
    for (j in b:numOfDim) {
      L = rbind(L,matrix(c(i,j,0),ncol = 3))
    }
  }
  L = L[-1,]#创建包含所有情形的列表
  P = c()  #临时集合(行数)
  e = 0 #终止数
  traNum = 0  #遍历次数
  triangle = matrix(nrow = 3,ncol = numOfDim,byrow = TRUE)  #初始化三角形
  while (sum(L[,3]==1)<jNum && sum(is.na(triangle))>0) {#
    e = e+1
    if (L[e,3]==1) {  #如果当前情况已经遍历过
      next  #下一轮循环
    }
    L[e,3] = 1;traNum = traNum + 1 #添加进已遍历的集合中
    Dim1 = L[e,1];Dim2 = L[e,2]  #获取第几维
    resultOfSubAlgo = subAlgo(M,Dim1,Dim2,circleN,traNum)#判断是否是FW point并输出三角形
    triangle = resultOfSubAlgo$triangle; trueSolution = resultOfSubAlgo$trueSolution; MtoChange = resultOfSubAlgo$MtoChange
    if (sum(is.na(triangle))==0) {#如果三角形不为空
      break
    }
    #如果最后一行不是FW point
    if (abs(trueSolution[Dim1]-MtoChange[numOfPoint,Dim1])<accuracy||abs(trueSolution[Dim2]-MtoChange[numOfPoint,Dim2])<accuracy) {
      #如果满足line21：
      if(abs(trueSolution[Dim1]-MtoChange[numOfPoint,Dim1])<accuracy){k = Dim1}
      if(abs(trueSolution[Dim2]-MtoChange[numOfPoint,Dim2])<accuracy){k = Dim2}
      W = c(W,list(k))  #加入待查看集合
      while (length(W)>0 && sum(is.na(triangle))>0) { #当待查看集合不为空且没有可行的三角形时
        k = unlist(W[1])
        print(paste(k,'might be included'))
        print(cat('at this moment these indeces might be included:',unlist(W),'\n'))
        for (i in 1:jNum) {
          if ((k==L[i,1]||k==L[i,2]) && L[i,3]==0) {#对于包含k且不在S中的数对
            P = c(P,i) #添加至临时集合P 
          }
        }
        if(length(P)==0){print(cat('but there are nothing includes',k,'left','\n'));W[1] = NULL;next} #如果包含k的情况已经遍历完了就跳过
        for(i1 in 1:length(P)){#对于临时集合P中的元素：
          i=unlist(P[i1]);L[i,3]=1; traNum=traNum+1 #添加到已遍历的集合S 
          Dim1=L[i,1];Dim2=L[i,2]  #获取第几维
          resultOfSubAlgo = subAlgo(M,Dim1,Dim2,circleN,traNum)#判断是否是FW point并输出三角形
          triangle = resultOfSubAlgo$triangle; trueSolution = resultOfSubAlgo$trueSolution; MtoChange = resultOfSubAlgo$MtoChange
          if (sum(is.na(triangle))==0) {#如果三角形不为空
            break
          }
          if (abs(trueSolution[Dim1]-MtoChange[numOfPoint,Dim1])<accuracy||abs(trueSolution[Dim2]-MtoChange[numOfPoint,Dim2])<accuracy) {#如果最后一行不是但满足line21
            #如果满足line21：
            if(abs(trueSolution[Dim1]-MtoChange[numOfPoint,Dim1])<accuracy){k = Dim1}
            if(abs(trueSolution[Dim2]-MtoChange[numOfPoint,Dim2])<accuracy){k = Dim2}
            if(!(list(k) %in% W)){W = c(W,list(k))}  #加入待查看集合
          }
        }
        print(paste(unlist(W[1]),'is not included'));W[1] = NULL  #删除第一个，也就是已经查看过的
        print(cat('at this moment these indeces might be included:',unlist(W),'\n'))
        P = list()  #清空临时集
      }
    }
  }
  print(paste('traverse',traNum,'times'))
  if(sum(is.na(triangle))==0){
    print(paste('the feasible plane is spaned by',Dim1,Dim2))
    resultMatrix[circleN,1] = Dim1; resultMatrix[circleN,2]=Dim2; resultMatrix[circleN,3]=traNum
  }
  
  if(sum(is.na(triangle))>0){
    print(paste('this algorithm didnt work'))
  }
}
write.table(resultMatrix,paste("ReDo_resultMatrixFor(0,",var,")Dim",numOfDim,"Point",numOfPoint-1,".csv",sep=""),append = TRUE,row.names = FALSE,col.names = FALSE,sep=",")#保存结果矩阵
t2_Dim15Point90 = proc.time()#程序结束时间
print(paste("this program lasts",t2_Dim15Point90 - t1_Dim15Point90,"second"))


