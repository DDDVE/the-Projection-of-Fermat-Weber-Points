#取固定数据集，随机三角形，看看保持的概率多大
####################################
#定义tropical乘法
tropicalTimes = function(a,b){
  return(a+b)
}

#定义tropical加法
tropicalPlus = function(a,b){
  plusResult = c()
  for (i in 1:numOfDim) {
    plusResult = c(plusResult,max(a[i],b[i]))
  }
  return(plusResult)
}

#计算单个点的投影系数
calculateProjectionCoef = function(dataPoint,triangle){
  projectionCoef = c()
  for (i in 1:3) {
    projectionCoef = c(projectionCoef,min(dataPoint - triangle[i,]))
  }
  return(projectionCoef)
}

#根据投影系数计算投影点
calculateProjectionPoint = function(projectionCoef,triangle){
  projectionPoint = c()
  for (i in 1:3) {
    for (j in 1:ncol(triangle)) {
      triangle[i,j] = projectionCoef[i] + triangle[i,j]
    }
  }
  for (j in 1:ncol(triangle)) {
    projectionPoint[j] = max(triangle[,j])
  }
  #标准化
  for (j in ncol(triangle):1){
    projectionPoint[j] = projectionPoint[j] - projectionPoint[1]	#将第一维化为0
  }
  return(projectionPoint)
}

########################################################################################
#首先生成数据矩阵
numOfDim = 5; numOfPoint = 30#只改这里！！！！！！！！！！！！！！！！！！！
testNum = 100#随机三角形的个数！！！！！！！！！！！！！！！！！！！！！！！！！
var = 10


M =  rmvnorm(numOfPoint, rep(0, numOfDim), sigma = diag(var, numOfDim))
M = round(M,5); accuracy = 10**(-7)
for (i in 1:numOfPoint){
  for (j in numOfDim:1){
    M[i,j] = M[i,j] - M[i,1]	#将第一维化为0
  }
}
setwd(paste("D:/paperData/ShowMyAlgoIsGood/Dim",numOfDim,"Point",numOfPoint,sep = ""))
write.table(M,paste("dataMatrixOfDim",numOfDim,"Point",numOfPoint,".csv",sep=""),sep=",")#保存矩阵
#####算FW point
f.obj = c()
for (i in 1:numOfPoint) {
  f.obj = c(f.obj,1)
}
for (i in 1:numOfDim) {
  f.obj = c(f.obj,0)
}
#做f.con的左上1/4个
f.conLeftUpper = matrix(nrow = (numOfPoint*numOfDim*(numOfDim-1))/2,ncol = numOfPoint);f.conLeftUpper[is.na(f.conLeftUpper)] = 0
for (i in 1:(numOfPoint*numOfDim*(numOfDim-1))/2) {
  j = (i-1)%/%(numOfDim*(numOfDim-1)/2)
  f.conLeftUpper[i,j+1] = -1    #将-1的元素放进去
}
f.conLeftHalf = rbind(f.conLeftUpper,f.conLeftUpper)    #做成f.con的左半边
#做f.con的右上一小块
f.conRightUpperPiece = matrix(nrow = (numOfDim*(numOfDim-1))/2,ncol = numOfDim)
f.conRightUpperPiece[is.na(f.conRightUpperPiece)] = 0
numOfDim1 = numOfDim2 = numOfDim    #准备好多余的变量
numOfDim1 = numOfDim-1
for (c in 1:numOfDim1){
  numOfDim2 = numOfDim-c
  for (i in 1:numOfDim2){
    a = i+(c-1)*numOfDim-(c*(c-1))/2
    b = i+c
    f.conRightUpperPiece[a,b] = -1
    f.conRightUpperPiece[a,c] = 1
  }
}
f.conRightUpper = c()
for (i in 1:numOfPoint){
  f.conRightUpper = rbind(f.conRightUpper,f.conRightUpperPiece)
}
f.conRightHalf = rbind(f.conRightUpper,-1*f.conRightUpper)		#做成f.con的右半边
f.con = cbind(f.conLeftHalf,f.conRightHalf)		#做成完整的f.con
#生成不等号向量
f.dir = c()
a = numOfPoint*numOfDim*(numOfDim-1)
for (i in 1:a) {
  f.dir = c(f.dir,"<=")
}
f.rhsFirstHalf = c()
numOfDim1 = numOfDim-1
for (i in 1:numOfPoint){#迭代到点数
  for (j1 in 1:numOfDim1){#迭代到维数-1
    a = j1+1
    for (j2 in a:numOfDim){#迭代到维数
      f.rhsFirstHalf = c(f.rhsFirstHalf,M[i,j1]-M[i,j2])
    }
  }
}
f.rhs = c(f.rhsFirstHalf, f.rhsFirstHalf*(-1))#做成完整的f.rhs
lp("min",f.obj,f.con,f.dir,f.rhs)
lp("min",f.obj,f.con,f.dir,f.rhs)$solution
solution = lp("min",f.obj,f.con,f.dir,f.rhs)$solution
#获取FWPoint并添加到M的最后一行
FWPoint = c()
a = numOfPoint+1; b = numOfPoint+numOfDim
for (i in a:b) {
  FWPoint = c(FWPoint,solution[i])
}
#标准化
for (j in numOfDim:1){
  FWPoint[j] = FWPoint[j] - FWPoint[1]	
}
#将标准化后的FWPoint添加到M的最后一行
M = rbind(M,FWPoint)
numOfPoint = numOfPoint + 1####################################################
#################################################################
resultMatrix = matrix(nrow = testNum,ncol = 1,byrow=TRUE)#结果矩阵
#生成随机三角形
for (triangleNum in 1:testNum) {#######################################################################
  triangle = matrix(nrow = 3,ncol = numOfDim,byrow = TRUE)  #每一次都要初始化
  for (i in 1:3) {
    triangle[i,] = c(0,round(runif(numOfDim-1,min = -9999,max = 9999),5))  #随机三角形
  }
  write.table(triangle,paste("triangle--",triangleNum,".csv",sep=""),sep = ",")#保存三角形，一个文件一个三角形
  #计算投影集#####################################################################
  projectionOfM = matrix(nrow = numOfPoint,ncol = numOfDim,byrow = TRUE)
  for (i in 1:numOfPoint) {
    projectionCoef = calculateProjectionCoef(M[i,],triangle)
    projectionPoint = calculateProjectionPoint(projectionCoef,triangle)
    projectionOfM[i,] = projectionPoint
  }
  #计算投影集的FW point################################################################################
  f.obj = c()
  for (i in 1:numOfPoint) {
    f.obj = c(f.obj,1)
  }
  for (i in 1:numOfDim) {
    f.obj = c(f.obj,0)
  }
  #做f.con的左上1/4个
  f.conLeftUpper = matrix(nrow = (numOfPoint*numOfDim*(numOfDim-1))/2,ncol = numOfPoint);f.conLeftUpper[is.na(f.conLeftUpper)] = 0
  for (i in 1:(numOfPoint*numOfDim*(numOfDim-1))/2) {
    j = (i-1)%/%(numOfDim*(numOfDim-1)/2)
    f.conLeftUpper[i,j+1] = -1    #将-1的元素放进去
  }
  f.conLeftHalf = rbind(f.conLeftUpper,f.conLeftUpper)    #做成f.con的左半边
  #做f.con的右上一小块
  f.conRightUpperPiece = matrix(nrow = (numOfDim*(numOfDim-1))/2,ncol = numOfDim)
  f.conRightUpperPiece[is.na(f.conRightUpperPiece)] = 0
  numOfDim1 = numOfDim2 = numOfDim    #准备好多余的变量
  numOfDim1 = numOfDim-1
  for (c in 1:numOfDim1){
    numOfDim2 = numOfDim-c
    for (i in 1:numOfDim2){
      a = i+(c-1)*numOfDim-(c*(c-1))/2
      b = i+c
      f.conRightUpperPiece[a,b] = -1
      f.conRightUpperPiece[a,c] = 1
    }
  }
  f.conRightUpper = c()
  for (i in 1:numOfPoint){
    f.conRightUpper = rbind(f.conRightUpper,f.conRightUpperPiece)
  }
  f.conRightHalf = rbind(f.conRightUpper,-1*f.conRightUpper)		#做成f.con的右半边
  f.con = cbind(f.conLeftHalf,f.conRightHalf)		#做成完整的f.con
  #生成不等号向量
  f.dir = c()
  a = numOfPoint*numOfDim*(numOfDim-1)
  for (i in 1:a) {
    f.dir = c(f.dir,"<=")
  }
  f.rhsFirstHalf = c()
  numOfDim1 = numOfDim-1
  for (i in 1:numOfPoint){#迭代到点数
    for (j1 in 1:numOfDim1){#迭代到维数-1
      a = j1+1
      for (j2 in a:numOfDim){#迭代到维数
        f.rhsFirstHalf = c(f.rhsFirstHalf,projectionOfM[i,j1]-projectionOfM[i,j2])
      }
    }
  }
  f.rhs = c(f.rhsFirstHalf, f.rhsFirstHalf*(-1))#做成完整的f.rhs
  solution = lp("min",f.obj,f.con,f.dir,f.rhs)$solution  #获取解向量
  #计算解向量到projectionOfM每一行的tropical距离之和
  a = numOfPoint+1;b = numOfPoint+numOfDim
  trueSolution = solution[a:b]#获取solution有用的一部分
  for (i in numOfDim:1) {
    trueSolution[i] = trueSolution[i] - trueSolution[1] #将FW point标准化
  }
  b = nrow(projectionOfM)
  g = ncol(projectionOfM)
  optTropicalDistanceSum = 0
  for (i in 1:b) {
    gap = sort(trueSolution-projectionOfM[i,])
    optTropicalDistanceSum = optTropicalDistanceSum + (gap[g]-gap[1])
  }
  #计算projectionOfM最后一行到其余各行的tropical距离之和
  b = nrow(projectionOfM)
  a = b-1
  g = ncol(projectionOfM)
  tropicalDistanceSum = 0
  for (i in 1:a) {
    gap = sort(projectionOfM[b,]-projectionOfM[i,])
    tropicalDistanceSum = tropicalDistanceSum + (gap[g]-gap[1])
  }
  print(paste("this is the ",triangleNum,"-th triangle"))
  print(paste('optimal:',optTropicalDistanceSum,'reality:',tropicalDistanceSum))
  print(cat('the abs of opt minus reality is:',abs(optTropicalDistanceSum - tropicalDistanceSum),'\n'))
  if (abs(optTropicalDistanceSum - tropicalDistanceSum)<accuracy) {#如果投影之后最后一行是FW point
    resultMatrix[triangleNum,1] = 1
    print(paste("this triangle is good"))
  }
  if (abs(optTropicalDistanceSum - tropicalDistanceSum)>=accuracy) {#如果投影后最后一行不是FW point
    print(paste("this triangle is not good"))
  }
}
#循环完之后保存结果矩阵
write.table(resultMatrix,paste("resultMatrixForDim",numOfDim,"Point",numOfPoint-1,".csv",sep = ""),sep = ",")
print(paste("result has been saved"))